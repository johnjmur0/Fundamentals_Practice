using System;
using System.Collections.Generic;
using System.Linq;

namespace ProjectEuler
{
    public class ProjectEuler_Problems
    {
        ///<summary> Problem 1:
        ///If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
        ///Find the sum of all the multiples of 3 or 5 below 1000.
        /// </summary>
         
        //Could do this faster by only looking at multiples of 3, 5, and excluding duplicates
        public static int Multiples_3_5_lessThan_x(int max)
        {
            int curr = 1;
            int sum = 0;
            while (curr < max)
            {
                if (curr % 3 == 0 || curr % 5 == 0)
                {
                    sum += curr;
                }
                curr++;
            }
            return (sum);
        }

        ///<summary> Problem 2:
        ///Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
        ///1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
        ///By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
        /// </summary>
        public static int FibSequence_EvenSum(int cap = 4000000)
        {
            int prev = 1; int curr = 2; int sum = 2; int next = 0;
            
            while (curr <= cap)
            {
                next = prev + curr;

                if (next > cap) { break; }

                if (next % 2 == 0) { sum += next; }

                prev = curr;
                curr = next;
            }
            return (sum);
        }

        public static List<long> GetPrimes(long cap)
        {
            List<long> primeList = new List<long>();
            int num = 2;

            while (num < cap)
            {
                bool isPrime = true;

                int factor = num / 2;
                int i = 0;
                for (i = 2; i <= factor; i++)
                {
                    if ((num % i) == 0)
                    {
                        isPrime = false;
                        break;
                    }
                }
                if (isPrime) { primeList.Add(num); }   
                num++;
            }
            return primeList;
        }

        ///<summary> Problem 3:
        ///The prime factors of 13195 are 5, 7, 13 and 29.
        ///What is the largest prime factor of the number 600851475143?
        ///</summary>
        public static long Largest_Prime_Factor(long num)
        {
            var factorList = new List<long>();

            var primeList = GetPrimes(num);

            for (int i = 0; i < primeList.Count / 4; i++)
            {
                var remainder = (double)num / (double)primeList[i];
                if (remainder % 1 == 0)
                {
                    factorList.Add(primeList[i]);
                }
            }

            return factorList.Max();

            throw new Exception("Didn't find any prime factors, so sorry");
        }
    }
}
